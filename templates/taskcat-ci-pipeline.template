{
  "AWSTemplateFormatVersion" : "2010-09-09",
  "Description" : "Creates Pipeline and required resources.",
  "Resources" : {
    "GitMergeLambda": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
                "Code": {
                    "S3Bucket": {
                        "Ref": "QSS3BucketName"
                    },
                    "S3Key": {
                        "Fn::Sub": "${QSS3KeyPrefix}functions/package/git_merge.zip"
                    }
                },
                "Description": "Merge github branches",
                "FunctionName": "Git_Merge",
                "Handler": {
                    "Fn::Join": [
                        ".",
                        [
                            "git_merge",
                            "lambda_handler"
                        ]
                    ]
                },
                "Role": {
                    "Fn::GetAtt": [
                        "GitMergeRole",
                        "Arn"
                    ]
                },
                "Runtime": "python3.6",
                "Timeout": "30"
            }
        },
      "GitMergeRole": {
            "Type": "AWS::IAM::Role",
            "Properties": {
                "AssumeRolePolicyDocument": {
                    "Version": "2012-10-17",
                    "Statement": [
                        {
                            "Effect": "Allow",
                            "Principal": {
                                "Service": "lambda.amazonaws.com"
                            },
                            "Action": "sts:AssumeRole"
                        }
                    ]
                },
                "Path": "/",
                "Policies": [
                    {
                        "PolicyName": "GitMergeRolePolicy",
                        "PolicyDocument": {
                            "Version": "2012-10-17",
                            "Statement": [
                                {
                                    "Effect": "Allow",
                                    "Action": [
                                        "logs:CreateLogGroup",
                                        "logs:CreateLogStream",
                                        "logs:PutLogEvents"
                                    ],
                                    "Resource": [
                                        {
                                            "Fn::Join": [
                                                "",
                                                [
                                                    "arn:aws:logs:",
                                                    {
                                                        "Ref": "AWS::Region"
                                                    },
                                                    ":",
                                                    {
                                                        "Ref": "AWS::AccountId"
                                                    },
                                                    ":log-group:/aws/lambda/*"
                                                ]
                                            ]
                                        }
                                    ]
                                },
                                {
                                    "Effect": "Allow",
                                    "Action": [
                                        "codepipeline:GetPipeline",
                                        "codepipeline:GetPipelineExecution",
                                        "codepipeline:GetPipelineState",
                                        "codepipeline:ListPipelines",
                                        "codepipeline:ListPipelineExecutions"
                                    ],
                                    "Resource": [
                                        {
                                            "Fn::Sub": "arn:aws:codepipeline:${AWS::Region}:${AWS::AccountId}:*"
                                        }
                                    ]
                                },
                                {
                                    "Effect": "Allow",
                                    "Action": [
                                        "codepipeline:GetJobDetails",
                                        "codepipeline:PutJobSuccessResult",
                                        "codepipeline:PutJobFailureResult"
                                    ],
                                    "Resource": "*"
                                },
                                {
                                    "Effect": "Allow",
                                    "Action": [
                                        "s3:GetObject"
                                    ],
                                    "Resource": "*"
                                },
                                {
                                    "Effect": "Allow",
                                    "Action": [
                                        "ssm:Describe*",
						                "ssm:Get*",
						                "ssm:List*"
                                    ],
                                    "Resource": "*"
                                }
                            ]
                        }
                    }
                ]
            }
        },
        "CodePipeline" : {
      "Type" : "AWS::CodePipeline::Pipeline",
      "Properties" : {
        "ArtifactStore" : {
          "Type" : "S3",
          "Location" : {
            "Ref" : "ArtifactBucket"
          }
        },
        "RoleArn" : {
          "Fn::GetAtt" : [ "CodePipelineServiceRole", "Arn" ]
        },
        "Stages" : [ {
          "Name" : "Source",
          "Actions" : [ {
            "Name" : "GitHub",
            "InputArtifacts" : [ ],
            "ActionTypeId" : {
              "Category" : "Source",
              "Owner" : "ThirdParty",
              "Version" : "1",
              "Provider" : "GitHub"
            },
            "OutputArtifacts" : [ {
              "Name" : "Source"
            } ],
            "Configuration" : {
              "Owner" : {
                "Ref" : "GitHubUser"
              },
              "Repo" : {
                "Ref" : "GitHubRepoName"
              },
              "Branch" : {
                "Ref" : "SourceRepoBranch"
              },
              "OAuthToken" : {
                "Ref" : "GitHubOAuthToken"
              }
            },
            "RunOrder" : 1
          } ]
        }, {
          "Name" : "Build",
          "Actions" : [ {
            "Name" : "CodeBuild",
            "InputArtifacts" : [ {
              "Name" : "Source"
            } ],
            "ActionTypeId" : {
              "Category" : "Build",
              "Owner" : "AWS",
              "Version" : "1",
              "Provider" : "CodeBuild"
            },
            "OutputArtifacts" : [ ],
            "Configuration" : {
              "ProjectName" : {
                "Ref" : "CodeBuild"
              }
            },
            "RunOrder" : 2
          } ]
        },
      	{
                        "Name": "Deploy",
                        "Actions": [
                            {
                                "Name": "Git-merge",
                                "ActionTypeId": {
                                    "Category": "Invoke",
                                    "Owner": "AWS",
                                    "Version": "1",
                                    "Provider": "Lambda"
                                },
                                "Configuration": {
                                    "FunctionName": {
                                        "Ref": "GitMergeLambda"
                                    },
                                    "UserParameters": {
                                        "Fn::Sub": "{ \"owner\": \"${GitHubUser}\", \"repo\": \"${GitHubRepoName}\", \"baseBranch\": \"${ReleaseBranch}\", \"headBranch\": \"${SourceRepoBranch}\" }"
                                    }
                                },
                                "RunOrder": 3
                            }
                        ]
                    } ]
      }
    },
    "CodeBuild" : {
      "Type" : "AWS::CodeBuild::Project",
      "Properties" : {
        "Description" : {
          "Fn::Sub" : "Submit build jobs for ${ProjectName} as part of CI/CD pipeline"
        },
        "ServiceRole" : {
          "Fn::GetAtt" : [ "CodeBuildServiceRole", "Arn" ]
        },
        "Artifacts" : {
          "Type" : "CODEPIPELINE"
        },
        "Environment" : {
          "Type" : "LINUX_CONTAINER",
          "ComputeType" : "BUILD_GENERAL1_SMALL",
          "Image" : "aws/codebuild/python:3.6.5",
          "EnvironmentVariables" : [ {
            "Name" : "PROJECTNAME",
            "Value" : {
              "Fn::Sub" : "${ProjectName}"
            }
          }, {
            "Name" : "ACCESS_KEY_ID",
            "Value" : "access_key_id",
            "Type" : "PARAMETER_STORE"
          }, {
            "Name" : "SECRET_ACCESS_KEY",
            "Value" : "secret_access_key",
            "Type" : "PARAMETER_STORE"
          } ]
        },
        "Source" : {
          "Type" : "CODEPIPELINE",
          "BuildSpec" : "version: 0.2\n\nphases:\n  install:\n    commands:\n      - echo Entered the install phase...\n      - apt-get update -y\n      - git --version\n      - python --version\n      - which python\n      - pip3 --version\n      - pip3 install --upgrade pip\n      - ln -s /usr/local/bin/pip /usr/bin/pip\n      - pip --version\n  pre_build:\n    commands:\n      - echo Entered the pre_build phase...\n      - echo Current directory is $CODEBUILD_SRC_DIR\n      - ls\n      - export dirname=${PWD##*/}\n      - echo Directory name $dirname\n      - cd ..\n      - mv $dirname $PROJECTNAME\n      - ls\n      - echo Installing Taskcat using pip3...\n      - pip install taskcat\n      - echo Verifying Taskcat installation...\n      - taskcat\n      - echo Configuring aws cli...\n      - aws configure set aws_access_key_id $ACCESS_KEY_ID\n      - aws configure set aws_secret_access_key $SECRET_ACCESS_KEY\n      - aws configure set default.region us-west-2\n      - echo Verifying aws cli configuration\n      - cat ~/.aws/credentials\n      - cat ~/.aws/config\n  build:\n    commands:\n      - echo Entered the build phase...\n      - taskcat -v -n -c quickstart-test/ci/config.yml\n      - ls -1 taskcat_outputs | while read LOG; do cat taskcat_outputs/${LOG}; done\n      - |\n        if $(grep -Fq \"CREATE_FAILED\" taskcat_outputs/index.html)\n        then\n          echo Quickstart FAILED!\n          exit 1\n        else\n          echo Quickstart Passed!\n          exit 0\n        fi\n"
        }
      }
    },
    "ArtifactBucket" : {
      "Type" : "AWS::S3::Bucket",
      "Properties" : {
        "AccessControl" : "Private",
        "LifecycleConfiguration" : {
          "Rules" : [ {
            "NoncurrentVersionExpirationInDays" : 30,
            "Status" : "Enabled"
          } ]
        },
        "VersioningConfiguration" : {
          "Status" : "Enabled"
        }
      }
    },
    "CodeBuildServiceRole" : {
      "Type" : "AWS::IAM::Role",
      "Properties" : {
        "AssumeRolePolicyDocument" : {
          "Version" : "2012-10-17",
          "Statement" : [ {
            "Sid" : "",
            "Effect" : "Allow",
            "Principal" : {
              "Service" : "codebuild.amazonaws.com"
            },
            "Action" : "sts:AssumeRole"
          } ]
        },
        "Path" : "/",
        "Policies" : [ {
          "PolicyName" : {
            "Fn::Sub" : "${ProjectName}-CICD-CodeBuildService-${AWS::Region}"
          },
          "PolicyDocument" : {
            "Version" : "2012-10-17",
            "Statement" : [ {
              "Action" : [ "s3:GetObject", "s3:GetObjectVersion", "s3:GetBucketVersioning", "s3:PutObject" ],
              "Resource" : [ {
                "Fn::Sub" : "arn:aws:s3:::${ArtifactBucket}"
              }, {
                "Fn::Sub" : "arn:aws:s3:::${ArtifactBucket}/*"
              } ],
              "Effect" : "Allow"
            }, {
              "Action" : [ "cloudformation:CreateStack", "cloudformation:DeleteStack", "cloudformation:DescribeStacks", "cloudformation:UpdateStack", "cloudformation:CreateChangeSet", "cloudformation:DeleteChangeSet", "cloudformation:DescribeChangeSet", "cloudformation:ExecuteChangeSet", "cloudformation:SetStackPolicy", "cloudformation:ValidateTemplate", "iam:PassRole" ],
              "Resource" : "*",
              "Effect" : "Allow"
            }, {
              "Action" : [ "logs:CreateLogGroup", "logs:CreateLogStream", "logs:PutLogEvents" ],
              "Resource" : "*",
              "Effect" : "Allow"
            }, {
              "Action" : [ "ssm:GetParameters" ],
              "Resource" : "*",
              "Effect" : "Allow"
            } ]
          }
        } ]
      }
    },
    "CodePipelineServiceRole" : {
      "Type" : "AWS::IAM::Role",
      "Properties" : {
        "AssumeRolePolicyDocument" : {
          "Version" : "2012-10-17",
          "Statement" : [ {
            "Sid" : "",
            "Effect" : "Allow",
            "Principal" : {
              "Service" : "codepipeline.amazonaws.com"
            },
            "Action" : "sts:AssumeRole"
          } ]
        },
        "Path" : "/",
        "Policies" : [ {
          "PolicyName" : {
            "Fn::Sub" : "${ProjectName}-CICD-CodePipelineService-${AWS::Region}"
          },
          "PolicyDocument" : {
            "Version" : "2012-10-17",
            "Statement" : [ {
              "Action" : [ "s3:GetObject", "s3:GetObjectVersion", "s3:GetBucketVersioning", "s3:PutObject" ],
              "Resource" : [ {
                "Fn::Sub" : "arn:aws:s3:::${ArtifactBucket}"
              }, {
                "Fn::Sub" : "arn:aws:s3:::${ArtifactBucket}/*"
              } ],
              "Effect" : "Allow"
            }, {
              "Action" : [ "cloudformation:CreateStack", "cloudformation:DeleteStack", "cloudformation:DescribeStacks", "cloudformation:UpdateStack", "cloudformation:CreateChangeSet", "cloudformation:DeleteChangeSet", "cloudformation:DescribeChangeSet", "cloudformation:ExecuteChangeSet", "cloudformation:SetStackPolicy", "cloudformation:ValidateTemplate", "iam:PassRole" ],
              "Resource" : "*",
              "Effect" : "Allow"
            }, {
              "Action" : [ "codebuild:BatchGetBuilds", "codebuild:StartBuild" ],
              "Resource" : "*",
              "Effect" : "Allow"
            }, {
              "Action" : [ "lambda:GetPolicy", "lambda:ListEventSourceMappings", "lambda:ListFunctions",
                "lambda:InvokeFunction",
                "lambda:GetEventSourceMapping",
                "lambda:GetFunction",
                "lambda:ListAliases","lambda:GetAlias","lambda:ListTags","lambda:ListVersionsByFunction",
                "lambda:GetAccountSettings",
                "lambda:GetFunctionConfiguration" ],
              "Resource" : "*",
              "Effect" : "Allow"
            } ]
          }
        } ]
      }
    }
  },
  "Parameters" : {
    "GitHubUser" : {
      "Description" : "Enter GitHub username of the repository owner",
      "Type" : "String"
    },
    "GitHubRepoName" : {
      "Description" : "Enter the repository name that should be monitored for changes",
      "Type" : "String"
    },
    "SourceRepoBranch" : {
      "Description" : "Enter the branch name to be monitored",
      "Type" : "String"
    },
    "ReleaseBranch": {
      "Description" : "Enter the release branch name. On successfull build, above branch will be merged into this branch.",
      "Type" : "String"
    },
    "GitHubOAuthToken" : {
      "Description" : "Create a token with 'repo' and 'admin:repo_hook' permissions here https://github.com/settings/tokens",
      "Type" : "String"
    },
    "ProjectName" : {
      "Description" : "This will be used to name the code build project",
      "Type" : "String"
    },
    "QSS3BucketName" : {
      "AllowedPattern": "^[0-9a-zA-Z]+([0-9a-zA-Z-]*[0-9a-zA-Z])*$",
        "ConstraintDescription": "Quick Start bucket name can include numbers, lowercase letters, uppercase letters, and hyphens (-). It cannot start or end with a hyphen (-).",
        "Default": "aws-quickstart",
        "Description": "S3 bucket name for the Quick Start assets. Quick Start bucket name can include numbers, lowercase letters, uppercase letters, and hyphens (-). It cannot start or end with a hyphen (-).",
        "Type": "String"
    },
    "QSS3KeyPrefix" : {
      "AllowedPattern": "^[0-9a-zA-Z-/]*$",
        "ConstraintDescription": "Quick Start key prefix can include numbers, lowercase letters, uppercase letters, hyphens (-), and forward slash (/).",
        "Default": "quickstart-taskcat-ci/",
        "Description": "S3 key prefix for the Quick Start assets. Quick Start key prefix can include numbers, lowercase letters, uppercase letters, hyphens (-), and forward slash (/).",
        "Type": "String"
    }
  },
  "Metadata" : {
    "AWS::CloudFormation::Interface" : {
      "ParameterGroups" : [ {
        "Label" : {
          "default" : "GitHub Configuration"
        },
        "Parameters" : [ "GitHubUser", "GitHubRepoName", "SourceRepoBranch", "ReleaseBranch","GitHubOAuthToken" ]
      }, {
        "Label" : {
          "default" : "Project Configuration"
        },
        "Parameters" : [ "ProjectName" ]
      }, 
    {
                    "Label": {
                        "default": "AWS Quick Start Configuration"
                    },
                    "Parameters": [
                        "QSS3BucketName",
                        "QSS3KeyPrefix"
                    ]
                } ],
      "ParameterLabels" : {
        "GitHubUser" : {
          "default" : "Repository owner"
        },
        "GitHubRepoName" : {
          "default" : "Repository name"
        },
        "SourceRepoBranch" : {
          "default" : "Source branch"
        },
        "ReleaseBranch" : {
          "default" : "Release branch"
        },
        "GitHubOAuthToken" : {
          "default" : "OAuth2 token"
        },
        "ProjectName" : {
          "default" : "Project name"
        },
        "QSS3BucketName": {
            "default": "Quick Start S3 Bucket Name"
        },
        "QSS3KeyPrefix": {
            "default": "Quick Start S3 Key Prefix"
        }
      }
    }
  },
  "Outputs" : {
    "CodePipelineURL" : {
      "Description" : "The URL of the created Pipeline",
      "Value" : {
        "Fn::Sub" : "https://${AWS::Region}.console.aws.amazon.com/codepipeline/home?region=${AWS::Region}#/view/${CodePipeline}"
      }
    }
  }
}